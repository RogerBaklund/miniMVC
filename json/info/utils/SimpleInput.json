{
"heading":"SimpleInput class",
"intro":"This class provides methods for getting input from the user.",
"example":"echo SimpleInput::ask('new_customer','Add customer');\n\necho SimpleInput::ask('new_customer','Add customer','Customer name:');\n\necho SimpleInput::ask('new_customer','Add customer',\n    'Customer name: <input type=\"hidden\" name=\"action\" value=\"add_customer\">');",
"description":"This is an abstract class with static methods, you can not make instances.</p><p>The <code>ask()</code> method requires two arguments: <code>$name</code> and <code>$label</code>. A button with the label will be visible, when it is clicked an input field is displayed, along with two buttons: one with the same label and one with the word 'Cancel'. If the labeled button is pressed a second time it results in a POST request to the server with the given input. The server must detect the provided name by using <code>isset($_POST[$name])</code>, or you can use a hidden field like in the last example above. The actual user input will be found in <code>$_POST[\"{$name}_input\"]</code>. The cancel button hides the input field.</p><p>A third, optional parameter can be used to add extra information in the form. This can be for instance a simple text and/or extra input fields, see examples above.</p><p><b>NOTE:</b> This method inserts elements with DOM id <code>{$name}_btn</code>, <code>{$name}_form</code> and <code>{$name}_input</code>. Make sure these don't collide with other elements on the page."
}
