{
"heading":"Formbuilder class",
"intro":"This class has methods for making forms.",
"example":"// make a dropdown, 'two' will be seleced, DOM id=test\necho FormBuilder::makeInput(\"enum('one','two','three')\",'test',2);\n\n// make a login form\n$styles .= FormBuilder::makeCSS();\necho FormBuilder::makeForm(array(\n  '*header' => '<h2>Login</h2>',\n  'action' => array('hidden','login'),\n  'user' => array('char(30)'),\n  'pass' => array('password'),\n  'login' => array('submit','Log in')\n));",
"description":"This is an abstract class, you can not make instances. You can use it to programmatically create HTML forms. It has three methods: <code>makeInput()</code>, <code>makeForm()</code> and <code>makeCSS()</code>.</p><p>The class has the following static variables which can be modified: <code>$max_text_input_size</code> controls the maximum width of input fields for strings, default value is 20. <code>$max_numeric_input_size</code> is for numeric fields, default value is 6. <code>$form_content_class</code> holds the class name used for the div inside the generated form, default value is <code>'formcontent'</code>. <code>$HTML5</code> is boolean, default true, set it to false to generate HTML4 compatible forms. <code>$defaults</code> is an array, it holds default settings for each input, each of them can be overidden by asterisk prefixed keys in the <code>$attrs</code> parameter (described below) for each field:</p><table style=\"text-align:left;\"><tr><th>wrapper</th><td><code>'&lt;div&gt;%s&lt;/div&gt;'</code></td></tr><tr><th>optional</th><td><code>true</code></td></tr><tr><th>id_prefix</th><td><code>''</code> (empty string)</td></tr><tr><th>label_after</th><td><code>false</code></td></tr><tr><th>label_suffix</th><td><code>':'</code></td></tr><tr><th>label_ucfirst</th><td><code>true</code></td></tr><tr><th>label_class</th><td><code>''</code> (empy string)</td></tr><tr><th>label_style</th><td><code>''</code> (empy string)</td></tr></table><p>The <code>makeInput()</code> method is used to make a single input control. It requires two parameters: <code>$type</code> and <code>$name</code>. It accepts additionally three optional arguments: <code>$value</code>, <code>$label</code> and <code>$attrs</code>. The <code>$type</code> parameter describes the field type. In addition to most of the common HTML types, it accepts <b>all</b> MySQL data types. Because of this <code>'text'</code> will return a <code>textarea</code> element, and not a \"normal\" HTML text input field. Use for instance <code>'char(20)'</code> instead. The number in paranteses represens the maximum length of the input, but not necessarily the visual width.</p><p>The <code>$name</code> parameter must be unique within the form. This is the name that will be sent to the server, identifying that particular input control. The name is also used for DOM id, unless <code>$defaults['id_prefix']</code> is used, or if a <code>*id_prefix</code> or a different id is provided in the <code>$attrs</code> parameter.</p><p>The <code>$value</code> parameter can be used to give an initial value to the input control.</p><p>The <code>$label</code> parameter is <code>NULL</code> by default, which means the name is used as a label. Set it to false to not create a label, or to any string value. Even if you want a colon after the label, you should not insert it in this parameter, you can use the static class variable <code>$defaults['label_suffix']</code> or <code>*label_suffix</code> in the <code>$attrs</code> parameter. Fields of type <code>hidden</code>, <code>submit</code>, <code>reset</code> and <code>button</code> will not get a label regardless of other settings.</p>The <code>$attrs</code> parameter can be a string with additional attributes for the input element, or it can be an associative array. If it is an array, it can also contain special configuration codes like the aforementioned <code>*id_prefix</code> and <code>*label_suffix</code>. This is not possible when this parameter is a string.</p><p>The <code>makeForm()</code> method is used to create the form. It needs an associative array as input, containing all the input controls and can also contain additional markup and buttons. This method will use <code>makeInput()</code> to make the actual input controls, using the parameters provided in the input array. Each entry in the array must either have an asterix as prefix for the <b>key</b>, or an array <b>value</b> with 1-4 elements. If the key has an asterix prefix, the value should be a string, and this string is inserted in the form. This can for instance be used for a header like the example above shows. The items in the array without an asterix prefix are names for the inputs, and these will be sent to the server on submit. The item value array <b>must</b> contain a type (see description of <code>$type</code> above) and it <b>can</b> contain an initial value, a label and an associative array with extra attributes for the input control and/or configuration settings, also described above.</p><p>The <code>makeForm()</code> method can take additionally three input parameters: <code>$action</code>, <code>$method</code> and <code>$form_attrs</code>. The default <code>$action</code> is empty, the default <code>$method</code> is <code>'post'</code>, and the default <code>$form_attrs</code> is also empty, it can be a string with attributes that will be added to the form element, for instance a submit handler, a DOM id and/or an enc-type attribute.</p><p>The <code>makeCSS()</code> method is used to create the CSS needed for the form. You can of course write your own CSS instead of using this method.</p><p><b>NOTE:</b> This class does currently not directly support file uploads, but you can use <code>$form_attrs</code> for the enc-type and an asterix prefixed key to insert file input elements."
}
