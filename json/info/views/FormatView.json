{
"heading":"FormatView class",
"intro":"This class is instantiated with a format string template and renders it with provided data.",
"example":"$data = array(\n  array('Joe','joe@company.com'),\n  array('Suzy','suzy@company.com'));\n\n$table = new FormatView('<table class=\"table\">%s</table>');\n$row = new FormatView('<tr><td>%s</td><td>%s</td></tr>');\n\n$rows = $row->loop($data);\n$table->data = array('rows'=>$rows);\necho $table;",
"description":"This is a subclass of the <code>View</code> class and has similar functionality, except it takes a format string as a template instead of reading it from an external file, making it suitable for smaller ad-hoc templates. See description of the <code>View</code> class for more information.</p><p>This class does not support PHP tags or PHP variables, instead you must use format string specifiers. <code>%s</code> means a string value, see the PHP documentation for a detailed description of <a href=\"http://php.net/manual/en/function.sprintf.php\" target=\"_blank\">all specifiers</a>.</p><p>The names for the keys in the array is not used by this class, it is the only view class that accepts list type arrays without keys. If you just use <code>%s</code> specifiers, the order of he items in the array must be the same as in the template, but you can also use a number to identify which item to insert: <code>%1$s</code> means the first item in the list, <code>%2$s</code> is he second and so on. Using this syntax you can change the order and also repeat the same item more than once.</p><p>The format specifiers also allows specifying number of decimals for float values, padding with zeroes or some other character, and conversion of integers to binary, octal or hex. See the PHP documentation (link above) for more information."
}
