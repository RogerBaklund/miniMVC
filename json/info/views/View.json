{
"heading":"View class",
"intro":"This class will load a template and render it with provided data.",
"example":"# Basic usage, default path is views/ and default file extension is .php\n$myView = new View('myTemplate'); // views/myTemplate.php\necho $myView->render($myData);\n\n# Alternatively set data property and output view as a string\n$myView->data = $myData;\necho '<div>'.$myView.'</div>';\n\n# Change default path and extension\nView::setDefaultPath('views/index/');\nView::setDefaultExt('.tpl');\n\n# View within view\n$page_template = new View('page'); // views/index/page.tpl\n$body_template = new View('body'); // views/index/body.tpl\n$body_template->data = $content; // $content is some model, object or associative array\necho $page_template->render(array('title'=>'My page','body'=>$body_template));\n\n# Instantiate with data\n$v = new View('example',$myData); // views/index/example.tlp\necho $v;\n\n# Override default path and extension\n$v = new View('example','other/views/','.php'); // other/views/example.php\necho $v->render($data);\n\n# Models/objects are resolved late, and can be modified\n$v = new View('user',$u = new Model());\nforeach($users as $user) {\n  $u->update($user); // change the model\n  echo $v; // view is updated\n}\n\n# ...or...\n$v = new View('user');\nforeach($users as $user) {\n  echo $v->render($user);\n}",
"description":"The <code>$myData</code> parameter is an associative array, a <code>Model</code> instance or an object. Each element in the array (or property of the object) will be a variable in the template. Standard PHP rules is used to resolve the template, use HTML and normal PHP tags. For simple variables you can use <code>&lt;?=$var?&gt;</code> tags as placeholders. You can have views within views by rendering them into associative arrays, objects or models which you use in the outer view, as shown with the <code>$body_template</code> example above.</p><p>Note that there are three different ways to instantiate this class. The second parameter have two different forms: You can instantiate with a template name and data, or you can instantiate with template name and a path. There is also third optional argument, this is for overriding the extention to use for the template.</p><p>You can also change template name, path, extension and data after the object is instantiated by setting the public properties <code>template</code>, <code>path</code>, <code>ext</code> and <code>data</code>. You can aso modify individual members of <code>data</code>, when it is a model or an object use <code>$v->data->prop = 'new value';</code> and when it is an associative array use <code>$v->data['prop'] = 'new value';</code>.</p><p>This class has two static methods (see example above) used for setting default path and extention. Objects instantiated before you change the default is not affected."
}
