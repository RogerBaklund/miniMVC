{
"heading":"Controllers",
"intro":"Controllers are classes that contains the logic in your application.",
"example":"",
"description":"Models holds the data and views presents the data to the user. Controllers contains the application logic and routes are used to bind everything together.</p><p>There are no real restrictions for your controllers, you can implement them in what ever way you like, the explanation below pertains to the default routing in the <code>Route::DefaultRoute()</code> method. You could use your own routing instead, then nothing of the following would apply to you.</p><p>The <code>Controller</code> class has almost no functionallity, just a simple constructor and a <code>_Default()</code> method. If you don't override the <code>_Default</code> method it will show an informative message when your application tries to access undefined controllers or methods, this can be usefull during development. You should implement a <code>DefaultController</code> with a <code>_Default()</code> method to handle these request in your own code.</p><p>The route defined in the standard <code>index.php</code> will trigger <code>DefaultController</code> when the requested controller does not exist, but you can of course define your own routing rules.</p><p>The default route setup in <code>index.php</code> looks like this:</p><p><code>Route::request(Route::DefaultPattern(APP_PATH),Route::DefaultRoute);</code></p><p>The <code>Route::DefaultPattern(APP_PATH)</code> call returns a regular expresson which looks like this:</p><p><code>@^{application}([^/?]*)/?([^/?]*)/?([^?]*)@</code></p><p>To explain how this is interpreted, consider an URI like this:</p><p><code>http://{domain}/{application}/{controller}/{action}/{params}</code></p><p><code>{domain}</code> is of course the domain where the application is running, it does not matter and is not considered. <code>{application}</code> is the relative path to your application, it is provided as a parameter to <code>Route::DefaultPattern()</code> in <code>index.php</code>. You only need to use it if there are other applications on the server, the default value is <code>/</code> (server root).</p><p>The first part in the URI after the application path is the controller name. If it is not provided in a request, or if the file <code>controllers/{controller}Controller.php</code> is not found, <code>DefaultController::_Default()</code> is called.</p><p>If the controller is found and <code>{action}</code> is provided in the URI, the method with the same name is executed. This method can be defined in the controller or inherited. If the method  does not exist, the <code>_Default()</code> method is executed. This also does not need to be a local method, it too can be inherited.</p><p>The <code>{params}</code> part of the URI is by default stored in a property named <code>params</code> in the controller, and not sent to the action method as one might expect. Instead the parameter sent to the action methods is anything returned from the <code>$bootstrap</code> callback (See below).</p><h3>Request handling</h3><p>The following sequence happens when you use the default routing:</p><ul><li>The class named {controller}Controller is loaded from the file named <code>controllers/{controller}Controller.php</code><li>If the controller file is not found, <code>DefaultController</code> is loaded.<li>If a <code>$bootstrap</code> callback is defined, it is executed and the return value is stored.<li>If <code>$noclass</code> is defined and is true, execution halts here.<li>Otherwise, if the requested {action} exists as a method in {controller}, it is called with the return value from <code>$bootstrap</code> as parameter. If the action is not defined the <code>_Default()</code> method is called instead.</ul><h3>Setup</h3><p>These are the required steps needed for setting up a controller based application:</p><ul><li><code>.htaccess</code> or equivalent for your web server needs to be configured to call <code>index.php</code> for all requests.<li><code>index.php</code> can have any necessary initial code and any number of routes defined. The default routing described here is a catch all rule and must be defined last.<li>There must be a <code>controller</code> directory where all controllers are stored.<li>By default views should be in a <code>views</code> directory</ul></p><h3>Writing controllers</h3><p>The visibilliy for the methods in the controllers is important. Methods that are actions and can be called from the URI must be public, and helper methods you use internally must be private or protected. You must define a DefaultController. Define some protected main methods like for example <code>showPage()</code>, <code>showError()</code> and <code>connectDB()</code> here, and your other controllers should extend this class. That way all major methods will be available in all controllers. You can of course override these methods, and you can subclass the subclasses too, if needed.</p><p>It might be usefull to think of controller classes as sections of a web site, and public methods as separate sub pages of that section."
}

