{
"heading":"DBTableModel class",
"intro":"This class represents a table in the current database.",
"example":"$db = new mysqli(HOST,USER,PASS,DBNAME);\n$users = new DBTableModel($db,'users');\n$fields = $users->getFields();\n\n$userlist = $users->getRows(\"name like 'Joe%'\");\n$entry = new View('UserListEntry');\n$entries = $entry->loop($users);\n$v = new View('UserList');\n$list = $v->render(array('entries'=>$entries));\n\n$user = $users->getRecordModel(1); // fetch user with id=1\n$v = new View('OneUser');\n$oneuser = $v->render($user);\n\n// calcuate 25% VAT for an order\n$items = new DBTableModel($db,'order_items');\n$items->getAggregate('sum(itemprice * qty * 0.25)','VAT',\"orderno=$orderno and VATcode=1\");",
"description":"This class extends the <code>DBModel</code> class and has methods for fetching meta information about the table as well as data rows, single records and aggregates. Available methods are: <code>check()</code>, <code>getCreateStatement()</code>, <code>getFields()</code>, <code>getPrimaryKey()</code>, <code>getRowCount()</code>, <code>getMin()</code>, <code>getMax()</code>, <code>getSum()</code>, <code>getAvg()</code>, <code>getRows()</code>, <code>getAggregate()</code> and <code>getRecordModel()</code>.</p><p>The <code>check()</code> method checks the status of the table, if it returns 'OK' the table is valid an ready to be used. If it returns something else it is an error string explaining the problem.</p><p>The <code>getCreateStatement()</code> method takes no arguments, it just returns the SQL create statement as a string.</p><p>The <code>getFields()</code> method has one optional argument: <code>$target</code>. If provided, it is the name of the property that will hold the field definitions. This is a list of associative arrays with the following keys: <code>Field, Type, Null, Key, Default</code> and <code>Extra</code>. The function returns this list regardless of if <code>$target</code> was provided or not.</p><p>The <code>getPrimaryKey()</code> method returns the name of the primary key as a string, or an array of strings if it is a compound primary key.</p><p>The <code>getRowCount()</code> method have two optional arguments: <code>$target</code> and <code>$where</code>. It returns the total row count for this table, or the number of rows matching the criteria provided in the <code>$where</code> parameter.</p><p>The <code>getCount()</code> method is similar to <code>getRowCount()</code>, except it counts rows with non-NULL values for a provided field. If called without a parameter it is an alias of <code>getRowCount()</code>. The methods <code>getCount()</code>, <code>getMin()</code>, <code>getMax()</code>, <code>getSum()</code>, <code>getAvg()</code> are all aggregate functions, they take a field name as first parameter, and have <code>$target</code> and <code>$where</code> as optional parameters. The field names are automatically wrapped in backticks, you should <b>not</b> use backticks when you call these functions.</p><p>The <code>getAggregate()</code> method is used internally by the other statistical methods, but this method does <b>not</b> wrap the input in backticks, which means you can use this method when you want to calculate something based on an expression, see the VAT example above.</p><p>The <code>getRows()</code> method has three optional arguments: <code>$where</code>, <code>$order</code> and <code>$limit</code>. Use <code>$where</code> to define which rows you want, use <code>$order</code> to specify the sort order, and use <code>$limit</code> to select a subset of the matched rows. All parameters requires standard MySQL syntax. The result is returned, nothing is stored in model properties. <b>Important:</b> The <code>$limit</code> parameter has a default of 100. This means you <b>must</b> provide a limit if you want to fetch more than 100 rows. You can set it to false, 0 or an empty string to fetch all rows.</p><p>The <code>getRecordModel()</code> method requires one parameter, the key for the row to fetch, and it has a second optional argument: the name of the key column. The default name is 'id'. It returns a <code>DBRecordModel</code> instance."
}
