{
"heading":"DBRecordModel class",
"intro":"This class represents a single record in a table in the current database.",
"example":"$db = new mysqli(HOST,USER,PASS,DBNAME);\n\n# Creating a record\n$newuser = new DBRecordModel($db,'users');\n$newuser->id = 42;\n$newuser->name = 'Roger';\n$newuser->email = 'roger@baklund.no';\n$newuser->save(); // explicit save, not needed\n\n# Loading a record\n$id = (int) $_GET['id'];\nModel::errormode(Model::ERROR_IGNORE); // disable errors\n$user = new DBRecordModel($db,'users',$id); // loads a user\nif($user->isLoaded()) {\n  $v = new View('ShowOneUser');\n  echo $v->render($user);\n} else echo '<p class=\"error\">User not found</p>';\n\n$user->email = $new_email;\n$user->save(); // not needed",
"description":"This class extends the <code>DBTableModel</code> class and adds methods to load, insert and update a single row in the table. This is handled <b>automatically</b>. Just provide the key for loading a record, and read the properties. If you change any properties of a loaded record, the changes will be saved in the DB when the object is destructed. You can also save it explicitly by calling the <code>save()</code> method. You can cancel the automatic saving by calling the <code>cancel()</code> method at any time. If the record did not exist, i.e. was not loaded, it will be inserted. If you do no changes, no update query is sent to the database when the object is destroyed. The <code>isLoaded()</code> method can be used to check if a record was loaded or not, see the example code above.</p><p><b>NOTE:</b> The default error mode will trigger an error if you try to load a record which does not exist.</p><p><b>NOTE:</b> This class currently only supports tables with a single column primary key."
}
