{
"heading":"Model class",
"intro":"This class represents a collection of data. This is the base class, there are several subclasses for different types of data.",
"example":"$myModel = new Model();\n$myModel->x = 'foo';\n$myModel->y = 2;\n$names = $myModel->names(); // ['x','y']\n$values = $myModel->values(); // ['foo',2]\n\n$myModel->update(array('y'=>3,'z'=>4)); // multiple changes\n$names = $myModel->names(); // ['x','y','z']\n$data = $myModel->data(); // ['x'=>'foo','y'=>3,'z'=>4]",
"description":"You can set properties on these instances. Each property will be a variable in the view where the model is used: <code>&lt;?=$x?&gt;</code> will output 'foo' based on the example above.</p><p>The methods <code>names()</code>, <code>values()</code> and <code>data()</code> can be used to get information about the model. The <code>update()</code> method can be used to update multiple properties at once.</p><p>Instances of the <code>Model</code> class can have properties of <b>any</b> type, including arrays, objects, views and other models.</p><p>When you use the <code>Model</code> class directly the properties only exist at runtime, use one of the subclasses for persistant data, or create your own subclass. You need to define <code>load()</code> and <code>save()</code> methods for persistance.</p><p>When using the persistant model classes any changes are saved automatically, but you can cancel this by calling the <code>cancel()</code> method. You can check if there are any changes using the <code>isDirty()</code> method. This will return true if changes has been made, and unless saving has been cancelled those changes will be saved when the model is removed from memory. You can check if <code>cancel()</code> has been called by using the <code>isCancelled()</code> method. You can also save changes at any time by calling the <code>save()</code> method."
}
