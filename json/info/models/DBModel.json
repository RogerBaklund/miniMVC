{
"heading":"DBModel class",
"intro":"This class represents a database.",
"example":"$db = new mysqli(HOST,USER,PASS,DBNAME);\n$dbmodel = new DBModel($db);\n$dbmodel->fetchTables('tables');\n$content->tables = new View('TableList',$dbmodel);\n$page_template->render($content);",
"description":"This is the base class for <code>DBStatusModel</code>, <code>DBTableModel</code> and <code>DBRecordModel</code>. You will normally not instantiate this class directly, instead you should use the subclasses. These classes requires a <code>$db</code> instance, this can be a <code>mysqli</code> instance as the example shows, or some custom database class which must have a <code>query()</code> method and an <code>escape_string()</code> method, and the <code>query()</code> method must return an object which must have a <code>fetch_assoc()</code> method. The internal SQL syntax is for MySQL, for other databases you must rewrite this.</p><p>The <code>DBModel</code> class defines four methods which are available from all the subclasses: <code>getTables()</code>, <code>fetchTables()</code>, <code>getTableNames()</code> and <code>fetchTableNames()</code>. The <code>get*</code> methods returns a list of available tables in the current database, the <code>fetch*</code> methods stores the list in a property name you provide as a parameter. The <code>getTables()</code> method returns a list of associative arrays, it can be used by the <code>View::loop()</code> method or in a custom loop. Returned columns are: <code>Name, Engine, Version, Row_format, Rows, Avg_row_length, Data_length, Max_data_length, Index_length, Data_free, Auto_increment, Create_time, Update_time, Check_time, Collation, Checksum, Create_options</code> and <code>Comment</code>. The <code>getTableNames()</code> method returns just a plain list of table names."
}
